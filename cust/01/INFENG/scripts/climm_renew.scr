<--start
trace on

###################################################################
	################### CREATE REPOSITORIES AND PRINT #################
	###################################################################

		if (repexists("CUST") == 0) then
				createrep("CUST")
		endif

		if (classexists("CUST", "CLIMM") == 0) then
				createclass("CUST", "CLIMM", 5)
		endif


	lv_r = urhk_b2k_printRepos("BANCS")
	print(lv_r)

	###################################################################
	################### Fetching field values from frontend ###########
	###################################################################

	CUST.CLIMM.funcCode = BANCS.INPUT.funcCode
	print(CUST.CLIMM.funcCode)
	
	CUST.CLIMM.cifId = BANCS.INPUT.cifId
	print(CUST.CLIMM.cifId)
	
	CUST.CLIMM.assetId = BANCS.INPUT.assetId
	print(CUST.CLIMM.assetId)
	
	CUST.CLIMM.insId = BANCS.INPUT.insId
	print(CUST.CLIMM.insId)
	
	CUST.CLIMM.insProvider = BANCS.INPUT.insProvider
	print(CUST.CLIMM.insProvider)
	
	CUST.CLIMM.assetGrpId = BANCS.INPUT.assetGrpId
	print(CUST.CLIMM.assetGrpId)
	
	
	
	if(CUST.CLIMM.insProvider == "BY SLFL") THEN
		CUST.CLIMM.insProviderTxt = "BY SFP"
	ENDIF
	
	if(CUST.CLIMM.insProvider == "SLFL ON CREDIT") THEN
		CUST.CLIMM.insProviderTxt = "SFP ON CREDIT"
	ENDIF
	
	if(CUST.CLIMM.insProvider == "DIRECT BY APPLICANT ON CREDIT") THEN
		CUST.CLIMM.insProviderTxt = "DIRECT BY APPLICANT ON CREDIT"
	ENDIF
	
	if(CUST.CLIMM.insProvider == "EXISTING SLF") THEN
		CUST.CLIMM.insProviderTxt = "EXISTING SFP"
	ENDIF
	
	if(CUST.CLIMM.insProvider == "DIRECT INSURANCE PAID") THEN
		CUST.CLIMM.insProviderTxt = "DIRECT INSURANCE PAID"
	ENDIF
	if(CUST.CLIMM.insProvider == "FREE INSURANCE GIVEN BY SALE") THEN
		CUST.CLIMM.insProviderTxt = "FREE INSURANCE GIVEN BY SALE"
	ENDIF

IF (CUST.CLIMM.funcCode=="N") THEN
#{	
	sv_s = "recCount1| select count(*) from custom.c_ls_lam where asset_id='" + CUST.CLIMM.assetGrpId + "' "
	print(sv_s)
	
	sv_b = urhk_dbSelectWithBind(sv_s)
	print(sv_b)
	if(sv_b==0) then
	#{
		CUST.CLIMM.recCount1 = BANCS.OUTPARAM.recCount1
		print(CUST.CLIMM.recCount1)
	#}
	endif
	if(CUST.CLIMM.recCount1 != 0) then
	#{
	#Get Incurance Covers info
					sv_a = ""
					sv_a =  sv_a + "coverType|select variable_value "
					sv_a =  sv_a + "from custom.cust_setvar_maint "
					sv_a =  sv_a + "where module_name ='INSURANCE' "
					sv_a =  sv_a + "and sub_module_name = 'COVERTYPE' "
					sv_a =  sv_a + "and type='TEXT' and del_flg='N' order by variable_value asc "
					print(sv_a)
					
					sv_b = urhk_dbCursorOpenWithBind(sv_a)
					PRINT(sv_b)
					
					IF(sv_b != 0) THEN
					#{
						CUST.CLIMM.isFailed = "Y"
						CUST.CLIMM.errMsg = "Insuracne Policy Data no Found"
						GOTO ENDOFSCRIPT
					#}
					ENDIF
					
					CUST.CLIMM.policyDescA= ""
					CUST.CLIMM.txtRecCount = 0
					sv_e = BANCS.OUTPARAM.DB_CURSOR_NUMBER
					sv_c = urhk_dbCursorFetch(sv_e)
					print(sv_c)
					
					WHILE(sv_c == 0)
					#{
						CUST.CLIMM.policyDescA = CUST.CLIMM.policyDescA + "!" + BANCS.OUTPARAM.coverType   
						
						sv_c = urhk_dbCursorFetch(sv_e)
					#}
					DO
					
					sv_u = urhk_dbCursorClose(sv_e)
					
					PRINT(CUST.CLIMM.policyDescA)
					sv_c = "policyDescA|" + CUST.CLIMM.policyDescA
					sv_y = urhk_SetOrbOut(sv_c + " ")
					print(sv_y)
					
			sv_s = "expiryDate| select distinct max(to_char(cover_note_exp_date,'dd-mm-yyyy')) from custom.cimm_tbl "
			sv_s = sv_s + "where asset_id = '" +CUST.CLIMM.assetId+ "' and asset_grp_id='" + CUST.CLIMM.assetGrpId + "' and ins_id='" + CUST.CLIMM.insId + "' "
			sv_s = sv_s + "and del_flg = 'N' and entity_cre_flg = 'Y' "
		
			sv_b = urhk_dbSelectWithBind(sv_s)
			print(sv_b)
			if(sv_b==0) then
			#{
				CUST.CLIMM.expiryDate = BANCS.OUTPARAM.expiryDate
				print(CUST.CLIMM.expiryDate)
			#}
			endif
					
		#sv_s = "datediff|SELECT TO_CHAR(DATE_PART('days',to_date((select to_char(db_stat_date,'dd-mm-yyyy') from tbaadm.gct),'dd-mm-yyyy') - "
		#sv_s = sv_s + " to_date('" + CUST.CLIMM.expiryDate + "','dd-mm-yyyy')),'9999') "
		#sv_s = sv_s + " from dual "
	    #
		#sv_b = urhk_dbSelectWithBind(sv_s)
		#print(sv_b)
		#if(sv_b==0) then
		##{
		#	CUST.CLIMM.datediff = BANCS.OUTPARAM.datediff
		#	print(CUST.CLIMM.datediff)
		#	
		#	if(CUST.CLIMM.datediff <= 0) then
		#	#{
		#		lv_b = urhk_SetOrbErr("Insuarance module is not expired.Renewal function is not allowed")
		#		lv_b=urhk_SetOrbOut("SuccessOrFailure|N" + " ")
		#		GOTO ENDOFSCRIPT
		#	
		#	#}
		#	endif
		##}
		#endif
					
	sv_s = "recCount| select count(*) from custom.cimm_tbl "
	sv_s = sv_s + "where asset_id = '" +CUST.CLIMM.assetId+ "' and asset_grp_id='" + CUST.CLIMM.assetGrpId + "' and ins_id='" + CUST.CLIMM.insId + "' "
	sv_s = sv_s + "and del_flg = 'N' and entity_cre_flg = 'Y' "

	sv_b = urhk_dbSelectWithBind(sv_s)
	print(sv_b)
	if(sv_b==0) then
	#{
		CUST.CLIMM.recCount = BANCS.OUTPARAM.recCount
		print(CUST.CLIMM.recCount)
		
		CUST.CLIMM.srl = CUST.CLIMM.recCount
		print(CUST.CLIMM.srl)
	#}
	endif

	if(CUST.CLIMM.recCount != 0) then
	#{
	
				sv_r = "assetValue|"
				sv_r = sv_r + "select distinct unit_price "
				sv_r = sv_r + "from custom.LAGM where asset_id = '" +CUST.CLIMM.assetId+ "' and asst_group_id='" + CUST.CLIMM.assetGrpId + "' "
				sv_r = sv_r + "  and del_flg = 'N' and entity_cre_flg = 'Y'"
				print(sv_r)
				
				sv_z = urhk_dbSelectWithBind(sv_r)
				print(sv_z)
				
				IF (sv_z==0) THEN 
				#{
			
					CUST.CLIMM.assetValue = BANCS.OUTPARAM.assetValue
					print(CUST.CLIMM.assetValue)
					
					lv_b=urhk_SetOrbOut("SuccessOrFailure|Y" + " ")
					lv_b=urhk_SetOrbOut("insProviderTxt|" + CUST.CLIMM.insProviderTxt + " ")
					
					sv_c = "assetValue|" + CUST.CLIMM.assetValue
					sv_y = urhk_SetOrbOut(sv_c + " ")
					print(sv_y)
					
					#sv_a = "SuccessOrFailure|Y"
					#sv_b = urhk_SetOrbOut(sv_a + " ")
					#print(sv_b)
					GOTO ENDOFSCRIPT
					
				#}
				ELSE
		        #{
					lv_b = urhk_SetOrbErr("Query Execution Failed")
					lv_b=urhk_SetOrbOut("SuccessOrFailure|N" + " ")
					GOTO ENDOFSCRIPT
				#}
				ENDIF
	#}
	else
	#{
		BANCS.OUTPUT.successOrFailure = "F"
		sv_u = urhk_SetOrbErr("RESULT_MSG|Nothing to renew")
		sv_u = urhk_SetOrbOut("SuccessOrFailure|N" + " ")
		GOTO ENDOFSCRIPT
	#}
	endif
	#}
	else
	#{
		BANCS.OUTPUT.successOrFailure = "F"
		sv_u = urhk_SetOrbErr("RESULT_MSG|Account should exist for renewal functionality.")
		sv_u = urhk_SetOrbOut("SuccessOrFailure|N" + " ")
		GOTO ENDOFSCRIPT
	
	
	#}
	endif
#}
ENDIF	


ENDOFSCRIPT:
	
trace off
end-->



